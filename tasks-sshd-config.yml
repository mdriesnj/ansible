    - name: Distribution
      debug: msg="{{ ansible_distribution }}"
    
    - name: configure sshd with pam
    #  become: true
      lineinfile:
        path: "/etc/ssh/sshd_config"
        #regex: "^(#)?{{item.key}}"
        regex: ^(# *)?{{item.key}}
        line: "{{item.key}} {{item.value}}"
        #state: present
      loop:
        - { key: "PermitRootLogin", value: "no" } # change back
        - { key: "Protocol", value: "2" } 
        - { key: "HostBasedAuthentication", value: "no" } 
        - { key: "IgnoreRHosts", value: "yes" }
        - { key: "AuthorizedKeysFile", value: ".ssh/authorized_keys" } 
        - { key: "PubkeyAuthentication", value: "yes" }
        - { key: "MaxAuthTries", value: "3" }
        - { key: "PermitUserEnvironment", value: "no" } 
        - { key: "UsePAM", value: "yes" }
        - { key: "X11Forwarding", value: "no" } 
        - { key: "AllowTcpForwarding", value: "no" } 
        - { key: "PermitEmptyPasswords", value: "no" }
        - { key: "AllowUsers", value: "mdries root" } 
        - { key: "Port", value: "22" } 
        - { key: "SyslogFacility", value: "AUTH" } 
        - { key: "LogLevel", value: "INFO" } 
        - { key: "ClientAliveInterval", value: "300" }   
      when: ansible_distribution == 'Debian' or ansible_distribution =='Ubuntu' or ansible_distribution =='AlmaLinux' 

    - name: configure sshd without pam
#      become: true
      lineinfile:
        path: "/etc/ssh/sshd_config"
        #regex: "^(#)?{{item.key}}"
        regex: ^(# *)?{{item.key}}
        line: "{{item.key}} {{item.value}}"
        #state: present
      loop:
        - { key: "PermitRootLogin", value: "yes" }
        - { key: "Protocol", value: "2" } 
        - { key: "HostBasedAuthentication", value: "no" } 
        - { key: "IgnoreRHosts", value: "yes" }
        - { key: "AuthorizedKeysFile", value: ".ssh/authorized_keys" } 
        - { key: "PubkeyAuthentication", value: "yes" }
        - { key: "MaxAuthTries", value: "3" }
        - { key: "PermitUserEnvironment", value: "no" } 
        - { key: "X11Forwarding", value: "no" } 
        - { key: "AllowTcpForwarding", value: "no" } 
        - { key: "PermitEmptyPasswords", value: "no" }
        - { key: "AllowUsers", value: "mdries root" } 
        - { key: "Port", value: "22" } 
        - { key: "SyslogFacility", value: "AUTH" } 
        - { key: "LogLevel", value: "INFO" } 
        - { key: "ClientAliveInterval", value: "300" } 
      when: ansible_distribution == 'Alpine' and firstrun == true

    - name: configure sshd without pam
#      become: true
      lineinfile:
        path: "/etc/ssh/sshd_config"
        #regex: "^(#)?{{item.key}}"
        regex: ^(# *)?{{item.key}}
        line: "{{item.key}} {{item.value}}"
        #state: present
      loop:
        - { key: "PermitRootLogin", value: "yes" }
        - { key: "Protocol", value: "2" } 
        - { key: "HostBasedAuthentication", value: "no" } 
        - { key: "IgnoreRHosts", value: "yes" }
        - { key: "AuthorizedKeysFile", value: ".ssh/authorized_keys" } 
        - { key: "PubkeyAuthentication", value: "yes" }
        - { key: "MaxAuthTries", value: "3" }
        - { key: "PermitUserEnvironment", value: "no" } 
        - { key: "X11Forwarding", value: "no" } 
        - { key: "AllowTcpForwarding", value: "no" } 
        - { key: "PermitEmptyPasswords", value: "no" }
        - { key: "AllowUsers", value: "mdries root" } 
        - { key: "Port", value: "22" } 
        - { key: "SyslogFacility", value: "AUTH" } 
        - { key: "LogLevel", value: "INFO" } 
        - { key: "ClientAliveInterval", value: "300" } 
      when: ansible_distribution == 'Alpine' and firstrun == false

    
    - name: systemd stuff
      become: true
      systemd:
        daemon_reload: yes
      when: ansible_distribution == 'Debian' or ansible_distribution =='Ubuntu' or ansible_distribution =='AlmaLinux'

    - name: service stuff    
 #     become: true
      service:
        name: sshd
        state: restarted
      when: ansible_distribution == 'Debian' or ansible_distribution =='Ubuntu' or ansible_distribution =='AlmaLinux' or ansible_distribution =='Alpine'
  
#    - name: restart sshd
#      become: true
   #   command: rcctl restart sshd
#      service:
#        name: sshd
#        state: restarted
   # - name: openbsd sshd restart 
   #   become: true
   #   #ansible.builtin.service:
   #   service:
   #     name: sshd
   #     state: restarted
#      when: ansible_distribution == 'OpenBSD'



#      systemd:
#        name: systemd-logind
#        masked: no
#        state: started

 #   - name: Unconditionally reboot the machine with all defaults
 #     reboot:


#        masked: yes
#        enabled: no
#        name: sshd.socket
#        masked: yes
#        name: sshd
#        enabled: no
#        name: ssh
#        enabled: yes

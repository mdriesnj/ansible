  - name: Distribution
    debug: msg="{{ ansible_distribution }}"
  - name: First run
    debug: msg="{{ firstrun }}"
#  - name: ansible
#    debug: msg="{{ ansible_boot_image }}"
#  - name: Print all available facts
#    ansible.builtin.debug:
#      var: ansible_facts
    
  #  debug: msg="{{ ansible_default_ipv4 }}"
  
#  - name: copy dotfiles.tar to other systems
#    copy:
#      remote_src: false
#      src: /home/mdries/dotfiles.tar
#      dest: /tmp/ 
#------ mdries ---------------
#------ Clean up first -------
  - name: chown mdries
    become: true
    file:
      path: /home/mdries
      state: directory
      recurse: yes
      owner: mdries
      group: mdries
    when: ansible_distribution != 'Alpine'
        
  - name: clean gitfiles
    file:
      path: /home/mdries/.git
      state: absent
    when: ansible_distribution != 'Alpine'

  - name: clean .zshrc			
    file:
      path: /home/mdries/.zshrc
      state: absent
    when: ansible_distribution != 'Alpine'

  - name: clean .vimrc
    file:
      path: /home/mdries/.vimrc
      state: absent
    when: ansible_distribution != 'Alpine'

  - name: clean .config
    file:
      path: /home/mdries/.config
      state: absent
    when: ansible_distribution != 'Alpine'

  - name: clean .local
    file:
      path: /home/mdries/.local
      state: absent
    when: ansible_distribution != 'Alpine'

  - name: clean .cache
    file:
      path: /home/mdries/.cache
      state: absent
    when: ansible_distribution != 'Alpine'

  - name: clean .oh-my-zsh
    file:
      path: /home/mdries/.oh-my-zsh
      state: absent
    when: ansible_distribution != 'Alpine'

  - name: clean .zshrc.old
    file:
      path: /home/mdries/.zshrc.old
      state: absent
    when: ansible_distribution != 'Alpine'

  - name: clean .zshrc.stock
    file:
      path: /home/mdries/.zshrc.stock
      state: absent
    when: ansible_distribution != 'Alpine'

  - name: clean ssh-config
    file:
      path: /home/mdries/ssh-config
      state: absent
    when: ansible_distribution != 'Alpine'

  - name: clean dotfiles
    file:
      path: /home/mdries/dotfiles
      state: absent
    when: ansible_distribution != 'Alpine'

#----- extract dotfiles.tar ------

#  - name: extract dotfiles
#    unarchive:
#      src: /tmp/dotfiles.tar
#      dest: /home/mdries/
#      remote_src: true

#------- copy dotfiles -----------

#  - name: mdries copy .oh-my-zsh
#    copy:
#      src: /home/mdries/src_dot_files/.oh-my-zsh/
#      dest: /home/mdries/.oh-my-zsh/
#      remote_src: false

#----------Alpine----------
  - name: first time  download oh-my-zsh
   # become: true
   # become_user: root
    get_url:
      url: https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh
      dest: ~/install_ohmyzsh.sh
      mode: 0755
    when: ansible_distribution == 'Alpine' and firstrun == true

#  - name: root - clone Oh My Zsh # noqa: latest
#    ansible.builtin.git:
#      repo: https://github.com/ohmyzsh/ohmyzsh.git
#      dest: /root/.oh-my-zsh
#      force: yes
#      depth: 1
#    when: ansible_distribution == 'Alpine' and firstrun == true
    
  - name: root - install oh my zsh
    command: /root/install_ohmyzsh.sh --unattended --keep-zshrc
    args:
      chdir: /root
    register: ohmyzsh_result
    failed_when: "'FAILED' in ohmyzsh_result.stderr"
    when: ansible_distribution == 'Alpine' and firstrun == true
     
#  - name: root - Install zsh-autosuggestions plugin # noqa: latest
#    ansible.builtin.git:
#      repo: https://github.com/zsh-users/zsh-autosuggestions
#      dest: /root/.oh-my-zsh
#      force: yes
#      depth: 1

#  - name: root - Install zsh-completions plugin # noqa: latest
#    ansible.builtin.git:
#      repo: https://github.com/zsh-users/zsh-completions
#      dest: /root/.oh-my-zsh
#      force: yes
#      depth: 1

#  - name: root - Install zsh-syntax-highlighting plugin # noqa: latest
#    ansible.builtin.git:
#      repo: https://github.com/zsh-users/zsh-syntax-highlighting.git
#      dest: /root/.oh-my-zsh
#      force: yes
#      depth: 1



#  - name: first time root Run Oh My Zsh installation script
#    become: true
#    become_user: root
#    command: sh /tmp/install_ohmyzsh.sh --unattended
#    register: ohmyzsh_result
#    failed_when: "'FAILED' in ohmyzsh_result.stderr"
#    when: ansible_distribution == 'Alpine' and firstrun == true

  - name: root copy .zshrc
    copy:
      remote_src: false
      src: /home/mdries/src_dot_files/.zshrc
      dest: /root
    when: ansible_distribution == 'Alpine' and firstrun == true

  - name: root create neofetch/config
    file:
      path: /root/.config/neofetch/
      state: directory
    when: ansible_distribution == 'Alpine' and firstrun == true

  - name: root copy neofetch/config
    copy:
      remote_src: false
      src: /home/mdries/src_dot_files/neofetch/config.conf
      dest: /root/.config/neofetch/
    when: ansible_distribution == 'Alpine' and firstrun == true

  - name: root create helix/config
    file:
      path: /root/.config/helix/
      state: directory
    when: ansible_distribution == 'Alpine' and firstrun == true

  - name: root copy helix/config
    copy:
      remote_src: false
      src: /home/mdries/src_dot_files/helix/config.toml
      dest: /root/.config/helix/
    when: ansible_distribution == 'Alpine' and firstrun == true




#  - name: mdries -Install Oh My Zsh # noqa: latest
#    become: true
#    become_user: mdries
#    become_method: doas
#    ansible.builtin.git:
#      repo: https://github.com/ohmyzsh/ohmyzsh.git
#      dest: /home/mdries/.oh-my-zsh
#      force: yes
#      depth: 1
#    when: ansible_distribution == 'Alpine' and firstrun == true

#  - name: root - install oh my zsh
#    command: ~/install_ohmyzsh.sh
#    args:
#      chdir: /home/mdries


#  - name: mdries- install oh my zsh
#    become: true
#    become_user: mdries
#    become_method: doas
#    command: make install
#    args:
#      chdir: /home/mdries/.oh-my-zsh
#    register: ohmyzsh_result
    #failed_when: "'FAILED' in ohmyzsh_result.stderr"
#    when: ansible_distribution == 'Alpine' and firstrun == true
  
  - name: first time mdries download oh-my-zsh
    become: true
    become_method: doas
    become_user: mdries
    get_url:
      url: https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh
      dest: ~/install_ohmyzsh.sh
      mode: 0755
    when: ansible_distribution == 'Alpine' and firstrun == true

  - name: first time mdries Run Oh My Zsh installation script
    become: true
    become_method: doas
    become_user: mdries
    command: /home/mdries/install_ohmyzsh.sh --unattended --keep-zshrc
    args:
      chdir: /home/mdries
    register: ohmyzsh_result
    failed_when: "'FAILED' in ohmyzsh_result.stderr"
    when: ansible_distribution == 'Alpine' and firstrun == true
   
#  - name: mdries -Install zsh-autosuggestions plugin # noqa: latest
#    become: true
#    become_user: mdries
#    become_method: su
#    ansible.builtin.git:
#      repo: https://github.com/zsh-users/zsh-autosuggestions
#      dest: /home/mdries/.oh-my-zsh
#      force: yes
#      depth: 1
#    when: ansible_distribution == 'Alpine' and firstrun == true
    
#  - name: mdries - Install zsh-completions plugin # noqa: latest
#    become: true
#    become_user: mdries
#    become_method: su
#    ansible.builtin.git:
#      repo: https://github.com/zsh-users/zsh-completions
#      dest: /home/mdries/.oh-my-zsh
#      force: yes
#      depth: 1
#    when: ansible_distribution == 'Alpine' and firstrun == true
    
#  - name: mdries - Install zsh-syntax-highlighting plugin # noqa: latest
#    become: true
#    become_user: mdries
#    become_method: su
#    ansible.builtin.git:
#      repo: https://github.com/zsh-users/zsh-syntax-highlighting.git
#      dest: /home/mdries/.oh-my-zsh
#      force: yes
#      depth: 1
#    when: ansible_distribution == 'Alpine' and firstrun == true
    
  - name: mdries copy .zshrc
    copy:
      remote_src: false
      src: /home/mdries/src_dot_files/.zshrc
      dest: /home/mdries
      owner: mdries
    when: ansible_distribution == 'Alpine' and firstrun == true

  - name: mdries create neofetch/config
    file:
      path: /home/mdries/.config/neofetch/
      state: directory
      owner: mdries
    when: ansible_distribution == 'Alpine' and firstrun == true

  - name: mdries copy neofetch/config
    copy:
      remote_src: false
      src: /home/mdries/src_dot_files/neofetch/config.conf
      dest: /home/mdries/.config/neofetch/
      owner: mdries
    when: ansible_distribution == 'Alpine' and firstrun == true


  - name: mdries create helix/config
    file:
      path: /home/mdries/.config/helix/
      state: directory
      owner: mdries
    when: ansible_distribution == 'Alpine' and firstrun == true

  - name: mdries copy helix/config
    copy:
      remote_src: false
      src: /home/mdries/src_dot_files/helix/config.toml
      dest: /home/mdries/.config/helix/
      owner: mdries
    when: ansible_distribution == 'Alpine' and firstrun == true

  - name: chown mdries
#    become: true
    file:
      path: /home/mdries
      state: directory
      recurse: yes
      owner: mdries
      group: mdries
    when: ansible_distribution == 'Alpine' and firstrun == true

#---------not first time-------------------
  - name: root download oh-my-zsh
    become: true
    become_method: su
    become_user: root
    get_url:
      url: https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh
      dest: /tmp/install_ohmyzsh.sh
      mode: 0755
    when: ansible_distribution == 'Alpine' and firstrun == false

  - name: root Run Oh My Zsh installation script
    become: true
    become_method: su
    become_user: root
    command: sh /tmp/install_ohmyzsh.sh --unattended
    register: ohmyzsh_result
    #failed_when: "'FAILED' in ohmyzsh_result.stderr"
    when: ansible_distribution == 'Alpine' and firstrun == false

  - name: mdries Run Oh My Zsh installation script
    command: sh /tmp/install_ohmyzsh.sh --unattended
    register: ohmyzsh_result
    #failed_when: "'FAILED' in ohmyzsh_result.stderr"
    when: ansible_distribution == 'Alpine' and firstrun == false


#  - name: mdries download oh-my-zsh
   # become: true
   # become_user: root
#    get_url:
#      url: https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh
#      dest: /home/mdries/install_ohmyzsh.sh
#      mode: 0755
#    when: ansible_distribution == 'Alpine' and firstrun == false




  
#  - name: chown mdries
#    become: true
#    file:
#      path: /home/mdries
#      state: directory
#      recurse: yes
#      owner: mdries
#      group: mdries
  
#------ root ---------------
#------ Clean up first -------
#  - name: chown root regular hosts
#    become: true
#    file:
#      path: /root
#      state: directory
#      recurse: yes
#      owner: root
#      group: root
    #when: ansible_hostname != 'pve' or ansible_hostname != 'hopperspve'
#    when: inventory_hostname in groups['normal']
      
#  - name: chown root pve .vimrc
#    become: true
#    file:
#      path: /root/.vimrc
#      state: file
#      owner: root
#      group: root
#    when: inventory_hostname in groups['pve']    

#  - name: chown root pve .oh-my-zsh
#    become: true
#    file:
#      path: /root/.oh-my-zsh
#      state: directory
#      recurse: yes
#      owner: root
#      group: root
#    when: inventory_hostname in groups['pve']    

  - name: root clean gitfiles
    become: true
    file:
      path: /root/.git
      state: absent
    when: ansible_distribution != 'Alpine'

  - name: root clean .zshrc
    become: true
    file:
      path: /root/.zshrc
      state: absent
    when: ansible_distribution != 'Alpine'

  - name: root clean .vimrc
    become: true
    file:
      path: /root/.vimrc
      state: absent
    when: ansible_distribution != 'Alpine'

  - name: root clean .config
    become: true
    file:
      path: /root/.config
      state: absent
    when: ansible_distribution != 'Alpine'

  - name: root clean .local
    become: true
    file:
      path: /root/.local
      state: absent
    when: ansible_distribution != 'Alpine'

  - name: root clean .cache
    become: true
    file:
      path: /root/.cache
      state: absent
    when: ansible_distribution != 'Alpine'

  - name: root clean .on-my-zsh
    become: true
    file:
      path: /root/.oh-my-zsh
      state: absent
    when: ansible_distribution != 'Alpine'

  - name: root clean .zshrc.old
    become: true
    file:
      path: /root/.zshrc.old
      state: absent
    when: ansible_distribution != 'Alpine'

  - name: root clean .zshrc.stock
    become: true
    file:
      path: /root/.zshrc.stock
      state: absent
    when: ansible_distribution != 'Alpine'

  - name: root clean ssh-config
    become: true
    file:
      path: /root/ssh-config
      state: absent
    when: ansible_distribution != 'Alpine'

  - name: root clean dotfiles
    become: true
    file:
      path: /root/dotfiles
      state: absent
    when: ansible_distribution != 'Alpine'

  - name: root Run Oh My Zsh installation script
    become: true
    command: sh /tmp/install_ohmyzsh.sh --unattended
    register: ohmyzsh_result
    failed_when: "'FAILED' in ohmyzsh_result.stderr"
    when: ansible_distribution != 'Alpine'

  - name: root copy .zshrc
    become: true
    copy:
      remote_src: false
      src: /home/mdries/src_dot_files/.zshrc
      dest: /root/
    when: ansible_distribution != 'Alpine'


  - name: root copy neofetch/config
    become: true
    copy:
      remote_src: false
      src: /home/mdries/src_dot_files/neofetch/config.conf
      dest: /root/.config/neofetch/
    when: ansible_distribution != 'Alpine'


#----- extract dotfiles.tar ------

#  - name: root extract dotfiles
#    become: true
#    unarchive:
#      src: /tmp/dotfiles.tar
#      dest: /root/
#      remote_src: true
      
#  - name: chown root regular hosts
#    become: true
#    file:
#      path: /root
#      state: directory
#      recurse: yes
#      owner: root
#      group: root
    #when: ansible_hostname != 'pve' or ansible_hostname != 'hopperspve'
#    when: inventory_hostname in groups['normal']
      
#  - name: find root files pve
#    become: true
#    find: 
#      paths: /root
#      excludes: '.ssh'
#    register: files_to_fix
    #when: ansible_hostname == 'pve' or ansible_hostname == 'hopperspve'
#    when: inventory_hostname in groups['pve']

#  - name: chown root pve .zshrc
#    become: true
#    file:
#      path: /root/.zshrc
#      state: file
#      owner: root
#      group: root
#    when: inventory_hostname in groups['pve']    

    - name: Distribution
      debug: msg="{{ ansible_distribution }}"

    - name: Check for eza
      stat:
        path: "{{ LinuxBrew_PATH }}/{{ EZA_FILE }}"
      register: eza_result

    - name: Check for helix
      stat:
        path: "{{ LinuxBrew_PATH }}/{{ HX_FILE }}"
      register: hx_result


    # - name: Print all available facts
    #   ansible.builtin.debug:
    #     var: ansible_facts    

#  #   - name: pause
#  #     pause:
#  #       seconds: 10

#-------- Alpine------------------------
#     - name: Alpine install 
#       become: true
#       apk:
#         name: btop, curl, eza, fd, fzf, git, helix, libcap-getcap, libcap-setcap, neofetch, qemu-guest-agent, ranger, ripgrep, shadow, tzdata, wget, zsh
#         state: latest
#         update_cache: true
#       when: ansible_distribution == 'Alpine'

#-------- Debian-------------------------    
    - name: Debian Update apt cache
      become: true
      apt:
        update_cache: yes
      when: ansible_distribution == 'Debian' or ansible_distribution =='Ubuntu'

    - name: Debian packages
      become: true
      apt:
        name: 
          - btop
          - build-essential
          - clang
          - curl
          - fd-find
          - fzf
          - gcc
          - git 
          - neofetch
          - qemu-guest-agent
          - net-tools   
          - ranger
          - ripgrep
          - tldr
          - wget
          - zsh
          - xz-utils
        state: latest
      when: inventory_hostname in groups['new_debian'] 

 #   - name: Debian Update apt cache
 #     become: true
 #     apt:
 #       update_cache: yes
 #     when: inventory_hostname in groups['new_debian_container']

    # - name: Debian remove postfix 
    #   become: true
    #   apt:
    #     name: 
    #       - postfix
    #     state: absent
    #   when: ansible_distribution == 'Debian' or ansible_distribution =='Ubuntu'

#-------- Alm-------------------------    

#     - name: alma dnf install 1
#       become: true
#       dnf:
#         name: https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm
#         state: present
#         validate_certs: no
#         disable_gpg_check: true
#       when: ansible_distribution == 'AlmaLinux'

#     - name: alma dnf install 2
#       become: true
#       dnf:
#         name: https://dl.fedoraproject.org/pub/epel/epel-next-release-latest-9.noarch.rpm
#         state: present
#         validate_certs: no
#         disable_gpg_check: true
#       when: ansible_distribution == 'AlmaLinux'

    - name: alma packages
      become: true
      yum:
        name: 
          - tar
          - wget
  #        - curl
  #        - sudo
          - git 
          - zsh
  #        - vim
 #         - stow
          - net-tools  
          - neofetch
 #         - neovim 
 #         - bat 
#          - ncdu
          - btop
          - fzf
          - tldr
          - fd-find
          - xz
       #   - gdu
  #        - ranger not in yum
        state: latest
      when: inventory_hostname in groups['new_alma'] 

    - name: alma remove imagemagick
      become: true
      yum:
        name: 
          - ImageMagick
          - ImageMagick-libs.x86_64
          - ImageMagick-libs-6.9.12.93-1.el9.x86_64
          - ImageMagick-libs.x86_64.6.9.12.93-1.el9 
          - ImageMagick-libs.x86_64
        state: absent
        autoremove: yes
      when: inventory_hostname in groups['new_alma'] 

#-----Eza-------------------------------------------------------
    # - name: delete eza
    #   become: true
    #   file:
    #     path: /usr/bin/eza
    #     state: absent

    # - name: "get eza"
    #   become: true
    #   get_url:
    #     url: https://github.com/eza-community/eza/releases/latest/download/eza_x86_64-unknown-linux-gnu.tar.gz
    #     dest: /tmp/
    #     mode: 0755
    #   when: inventory_hostname in groups['new_debian'] or inventory_hostname in groups['new_alma']

    # - name: "extract eza"
    #   become: true
    #   unarchive:
    #     remote_src: yes
    #     src: /tmp/eza_x86_64-unknown-linux-gnu.tar.gz
    #     dest: /usr/bin/
    #   when: inventory_hostname in groups['new_debian'] or inventory_hostname in groups['new_alma']

#----- Helix-----------------------------------------------------
    # - name: delete helix
    #   become: true
    #   file:
    #       path: /usr/bin/hx 
    #       state: absent


    # - name: "get helix"
    #   become: true
    #   get_url:
    #     url: https://github.com/helix-editor/helix/releases/download/24.03/helix-24.03-x86_64-linux.tar.xz
    #     dest: /tmp/
    #     mode: 0755
    #   when: inventory_hostname in groups['new_debian'] or inventory_hostname in groups['new_alma']

    # - name: "extract helix"
    #   become: true
    #   unarchive:
    #     remote_src: yes
    #     src: /tmp/helix-24.03-x86_64-linux.tar.xz
    #     dest: /tmp
    #   when: inventory_hostname in groups['new_debian'] or inventory_hostname in groups['new_alma']

    # - name: "copy hx /bin"
    #   become: true
    #   copy:
    #     remote_src: yes
    #     src: /tmp/helix-24.03-x86_64-linux/hx
    #     dest: /usr/bin/
    #     mode: 0755
    #   when: inventory_hostname in groups['new_debian'] or inventory_hostname in groups['new_alma']

    # - name: "make helix runtime location"
    #   become: true
    #   file:
    #     path: /usr/share/helix/runtime
    #     state: directory
    #   when: inventory_hostname in groups['new_debian'] or inventory_hostname in groups['new_alma']

    # - name: "copy helix runtime /usr/share"
    #   become: true
    #   copy:
    #     remote_src: yes
    #     src: /tmp/helix-24.03-x86_64-linux/runtime
    #     dest: /usr/share/helix/
    #     mode: 0755
    #   when: inventory_hostname in groups['new_debian'] or inventory_hostname in groups['new_alma']

#----- Linux Brew ----------------------------------------------
#----- Linuxbrew-----------------------------------------------------

#     - name: "get Linuxbrew"
# #      become: true
#       get_url:
#         url: https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh
#         dest: /tmp/
#         mode: 0755

  
#     - name: root - install command line no argv
# #      become: true
#       command: /bin/bash -c NONINTERACTIVE=1 /tmp/install.sh
#       # register: linuxbrew_result
#       # failed_when: "'FAILED' in linuxbrew_result.stderr"

    - name: Clone Homebrew GitHub repo
      become: true
      ansible.builtin.git:
        repo: "https://github.com/Homebrew/brew"
        dest: "/opt/linuxbrew/Homebrew"
        version: "master"
        force: true
      when: inventory_hostname in groups['new_alma'] 

#      become_user: "{{ homebrew_user }}"
      

    - name: Create bin directory for brew
      become: true
      ansible.builtin.file:
        path: "/opt/linuxbrew/bin"
        state: directory
        owner: mdries
        group: mdries
        mode: 0755
      when: inventory_hostname in groups['new_alma'] 

    - name: Create a symbolic link for brew
      become: true
      ansible.builtin.file:
        src: "/opt/linuxbrew/Homebrew/bin/brew"
        dest: "/opt/linuxbrew/bin/brew"
        owner: mdries
        group: mdries
        state: link
        mode: 0755
      when: inventory_hostname in groups['new_alma'] 
    
    - name: fix permissions
      become: true
      file:
        path: /opt/linuxbrew
        state: directory
        recurse: true
        owner: mdries
        group: mdries
        mode: 0755
      when: inventory_hostname in groups['new_alma'] 

    # - name: update homebrew
    #   community.general.homebrew:
    #     update_homebrew: true
    #     upgrade_all: true
    #   when: ansible_distribution != 'AlmaLinux'

    - name: homebrew install helix
      community.general.homebrew:
        name: helix
        state: present
      when: inventory_hostname in groups['new_alma']  and not hx_result.stat.exists

    - name: pause
      pause:
        seconds: 15


    - name: homebrew install eza
      community.general.homebrew:
        name: eza
        state: present
      when: inventory_hostname in groups['new_alma']  and not eza_result.stat.exists


#     - name: "mdries - install Linuxbrew"
# #      become: true
#       command: #/tmp/install.sh NONINTERACTIVE CI
#         argv:
#           - /bin/sh 
#           - NONINTERACTIVE=1
#           - /bin/bash 
#           - -c 
#           - /tmp/install.sh
# #         - CI
#       register: linuxbrew_result
#       failed_when: "'FAILED' in linuxbrew_result.stderr"

#     - name: "root - install Linuxbrew"
#       become: true
#       command: #/tmp/install.sh NONINTERACTIVE CI
#         argv:
#           - /bin/sh
#           - NONINTERACTIVE=1
#           - /bin/bash 
#           - -c 
#           - /tmp/install.sh
# #          - CI
#       register: linuxbrew_result
#       failed_when: "'FAILED' in linuxbrew_result.stderr"



